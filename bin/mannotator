#! /usr/bin/env perl

###############################################################################
#
#    mannotator
#    
#    Annotate a genome!
#
#    Copyright (C) 2011 2012 Michael Imelfort Florent Angly Connor Skennerton
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
###############################################################################

#pragmas
use strict;
use warnings;

#perl modules
#use Getopt::Long;
use Getopt::Euclid;
use Mannotator;
#use Pod::Usage;
#locally-written modules

BEGIN {
    select(STDERR);
    $| = 1;
    select(STDOUT);
    $| = 1;
}

# get input params and print copyright
&printAtStart();
#my $options = &checkParams();

######################################################################
# CODE HERE
######################################################################
# globals
my %global_U2A_hash = ();
my %global_annotations_hash = ();

# Process ID and time identify a unique instance of Mannotator
my $global_tmp_prefix = 'mannotator_'.$$.time;
my $global_tmp_fasta_prefix = $global_tmp_prefix.'_unknowns';
my $global_tmp_fasta = $global_tmp_fasta_prefix.'.fna';
my %global_tmp_folders = ();

# results cut off
my $global_results_max_cut_off = 1; # use the top BLAST similarity only

# use the new blast+ programs rather than blastall
my $use_new_blast = 0;
if (exists $ARGV{'-n'}) {$use_new_blast = 1;}

# check the gff option for spaces or commas

if (scalar @{$ARGV{'-g'}} == 1) {
    # single file (maybe commas)

    my $num_comma = $ARGV{'-g'}->[0] =~ tr/,/,/;
    if($num_comma == 0) {
        #definately single file
        &singleFileWorkflow($ARGV{'-g'}->[0], $ARGV{'-c'}, \$global_tmp_fasta, \$global_tmp_prefix, $ARGV{'-s'}, 
                            $ARGV{'-t'}, $ARGV{'-b'}, $ARGV{'-p'}, $use_new_blast, $ARGV{'-i'}, \%global_annotations_hash,
                            \%global_U2A_hash, $ARGV{'-e'}, $global_results_max_cut_off, $ARGV{'-o'}, \$global_tmp_fasta_prefix );
    } else {
        # got some commas, multifile
        print "$ARGV{'-m'}\n";
        &multiFileWorkflow($ARGV{'-g'}->[0], \%global_tmp_folders, \$global_tmp_prefix, $ARGV{'-c'}, $ARGV{'-m'}, \$global_tmp_fasta, $ARGV{'-s'}, 
                       \$global_tmp_fasta_prefix, $ARGV{'-t'}, $ARGV{'-b'}, $ARGV{'-p'}, $ARGV{'-n'}, $ARGV{'-d'}, $ARGV{'-i'}, \%global_U2A_hash,
                       $ARGV{'-e'}, $global_results_max_cut_off, \%global_annotations_hash, $ARGV{'-o'}, $ARGV{'--one'}, $ARGV{'--two'}, 
                       $ARGV{'--three'}, $ARGV{'--four'}, $ARGV{'--five'});
    }
} else {
    # multiple instanses
    my $gff_files = join (",",@{$ARGV{'-g'}});
    &multiFileWorkflow($gff_files, \%global_tmp_folders, \$global_tmp_prefix, $ARGV{'-c'}, $ARGV{'-m'}, \$global_tmp_fasta, $ARGV{'-s'}, 
                       \$global_tmp_fasta_prefix, $ARGV{'-t'}, $ARGV{'-b'}, $ARGV{'-p'}, $ARGV{'-n'}, $ARGV{'-d'}, $ARGV{'-i'}, \%global_U2A_hash,
                       $ARGV{'-e'}, $global_results_max_cut_off, \%global_annotations_hash, $ARGV{'-o'}, $ARGV{'--one'}, $ARGV{'--two'}, 
                       $ARGV{'--three'}, $ARGV{'--four'}, $ARGV{'--five'});
}

#
# Finally, remove all the temp directories (if we need to)
#
if(exists $ARGV{'-x'})
{
    print "Removing all but the blastx file\n";
    &cleanTmps($ARGV{'-b'}, 1, \%global_tmp_folders, \$global_tmp_fasta, $ARGV{'-s'}, $ARGV{'-t'}, $global_tmp_fasta_prefix);
}
elsif(!exists $ARGV{'-k'})
{
    print "Cleaning up tmp folders\n";
    &cleanTmps($ARGV{'-b'}, 0, \%global_tmp_folders, \$global_tmp_fasta,  $ARGV{'-s'}, $ARGV{'-t'}, $global_tmp_fasta_prefix);
}

if(exists $ARGV{'-f'})
{
    &createFlatFile($ARGV{'-c'}, \$ARGV{'-o'});
}


sub singleFileWorkflow {

    my ($gff_files, $contig_files, $tmp_fasta_ref, $tmp_prefix_ref, $sims_file, 
        $threads, $blast_program, $blastdb, $new_blast, $mapping_file, $annotations_hash_ref,
        $u2a_hash_ref, $evalue, $max_results_cutoff, $output_file, $tmp_fasta_prefix_ref) = @_;

    print "Step 1: creating ORFs from the gff file\n";
    &gff2fasta($gff_files, $contig_files, $tmp_fasta_ref, ${$tmp_prefix_ref}.".gff");

    print "Step 2: Blasting unknown ORFs against database... This could take some time. Perhaps you need a coffee?\n";
    &blastUnknowns($sims_file, $tmp_fasta_ref, $tmp_fasta_prefix_ref, $threads, $blast_program, \$blastdb, $new_blast);

    print "Step 5: Annotating using the BLAST results\n";
    &loadU2A($mapping_file, $annotations_hash_ref);

    my @blast_files = (${$tmp_fasta_prefix_ref}.".".$blast_program);

    &generateAnnotations(\@blast_files, $u2a_hash_ref, $evalue, $max_results_cutoff, $annotations_hash_ref );

    &recombineGff3(${$tmp_prefix_ref}.".gff", $output_file, $annotations_hash_ref);

    # delete our tmp files
    # only need to delete the tmp gff ourselves then call cleanTemps
    unlink ${$tmp_prefix_ref}.".gff" or die "ERROR: could not delete file ${$tmp_prefix_ref}.gff\n$1\n";

}

sub multiFileWorkflow {
    
    my ($gff_files, $tmp_folders_ref, $tmp_prefix_ref, $contig_file, $min_len, $tmp_fasta_ref,
        $sims_file, $tmp_fasta_prefix_ref, $threads, $blast_program, $blastdb, $new_blast,
        $seq_embed,$mapping_file, $u2a_hash_ref,$evalue, $results_cutoff, $ann_hash_ref, $output_file,
        $one, $two, $three, $four, $five ) = @_;
    print "$min_len\n";
    #
    # Step 1. Split down the GFF3 and FASTA files into multiple folders
    #
    unless ($one)
    {
        print "Step 1: Splitting GFF and FASTA files into temporary directories\n";
        #&splitGffs($options->{'gffs'}, \%global_tmp_folders, \$global_tmp_prefix);
        &splitGffs($gff_files, $tmp_folders_ref, $tmp_prefix_ref);
        #print $options->{'contigs'}, "\n";
        #&splitFasta($options->{'contigs'}, \$global_tmp_prefix);
        &splitFasta($contig_file, $tmp_prefix_ref);
    }

    #
    # Step 2. For each folder, combine the gff files and produce a list of sequences to be blasted!
    #
    unless($two)
    {
        print "Step 2: Combining Gffs\n";
        #&combineGffs($options->{'gffs'}, \%global_tmp_folders, $min_len, \$global_tmp_fasta);
        &combineGffs($gff_files, $tmp_folders_ref, $min_len, $tmp_fasta_ref);
    }

    #
    # Step 3. Blast the unknowns against UniRef or Nr proteic database
    #
    unless ($three)
    {
        print "Step 3: Blasting unknown ORFs against database... This could take some time. Perhaps you need a coffee?\n";
        #&blastUnknowns($options->{'sims'}, \$global_tmp_fasta, \$global_tmp_fasta_prefix, $threads, $blast_program, \$options->{'protdb'}, $use_new_blast);
        &blastUnknowns($sims_file, $tmp_fasta_ref, $tmp_fasta_prefix_ref, $threads, $blast_program, \$blastdb, $new_blast);
    }

    #
    # Step 4. Splitting the BLAST results
    #
    unless ($four)
    {
        print "Step 4: Splitting BLAST results\n";
        #&splitBlastResults($options->{'sims'}, \$global_tmp_fasta_prefix, $blast_program, \$global_tmp_prefix, \%global_tmp_folders );
        &splitBlastResults($sims_file, $tmp_fasta_prefix_ref, $blast_program, $tmp_prefix_ref, $tmp_folders_ref);
    }

    #
    # Step 5. Annotate the GFFs using BLAST results and re-combine!
    #
    unless ($five)
    {
        print "Step 5: Annotating using the BLAST results\n";
        #&annotate($blast_program, $options->{'seq_embed'},  $options->{'i2a'}, \%global_U2A_hash, \%global_tmp_folders,
        #    $options->{'contigs'},  $global_evalue_cutoff, $global_results_max_cut_off, \%global_annotations_hash, $global_output_file );
        &annotate($blast_program, $seq_embed, $mapping_file, $u2a_hash_ref, $tmp_folders_ref, $contig_file, $evalue, $results_cutoff, $ann_hash_ref, $output_file )
    }

}
######################################################################
# TEMPLATE SUBS
######################################################################

sub printAtStart {
print<<"EOF";
---------------------------------------------------------------- 
 $0
 Copyright (C) 2011, 2012 
 Michael Imelfort, Florent Angly, Connor Skennerton
    
 This program comes with ABSOLUTELY NO WARRANTY;
 This is free software, and you are welcome to redistribute it
 under certain conditions: See the source for more details.
---------------------------------------------------------------- 
EOF
}

__DATA__

=head1 NAME

    mannotator

=head1 VERSION

    0.1

=head1 COPYRIGHT

   copyright (C) 2011, 2012 
   Michael Imelfort, Florent Angly, Connor Skennerton

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.

=head1 DESCRIPTION

    
    STEPS:

    BEFORE YOU RUN THE MANOTATOR!
    
    1a. Send entire genome out to RAST server.
    1b. Run entire genome though prodigal
    
    You now have 2 gff3 files...

    NOW, UNLEASH THE MANOTATOR!

=head1 REQUIRED ARGUMENTS

=over

=item -g[ffs] <gff>... | --gffs <gff>...

A comma or space separated list of gff3 formatted files

=item -c[ontigs] <contig> | --contigs <contig>

A fasta formated file containing contigs

=for Euclid:
    contig.type: readable
    contig.type.error: cannot open <contig>

=back

=head1 OPTIONS

=over

=item -p[rotdb] <protdb> | --protein-database <protdb>

Specify a custom location for a blast database (not a FASTA file) of sequences Default: protdb.default

=for Euclid:
    protdb.default: '/srv/whitlam/bio/db/uniprot/uniref90/uniref90.fasta'
    protdb.type: string

=item -i[2a] <mapping> | --i2a <mapping>

Specify a custom location for the database accession number mapping file Default: mapping.default

=for Euclid:
    mapping.default: '/srv/whitlam/bio/db/mannotator/Uniref201106_mappings.txt'
    mapping.type: readable
    mapping.type.error: cannot read file <mapping>

=item -m[in_len] <minlen> | --minimum-length <minlen>

Remove ORFs less than this length (in bp). Default: minlen.default bp

=for Euclid:
    minlen.default: 100
    minlen.type: +integer
    minlen.type.error: <minlen> must be a positive integer

=item -d | --seq-embed

Embed sequences into GFF files (useful to view the annotation in Artemis)

=item -f[latfile] | --flat-file

 Optionally create multiple genbank files for your contigs

=item -b[last_prg] <blastprog> | --blast-program <blastprog>

The type of blast to run

=for Euclid:
    blastprog.default: 'blastx'

=item -e[value] <evalue> | --evalue <evalue>

E-value cutoff when running blast

=for Euclid:
    evalue.default: 1e-8
    evalue.type: num
    evalue.type.error: <evalue> must be a number

=item -t[hreads] <threads> | --threads <threads>

Run blast on multiple threads

=for Euclid:
    threads.default: 1
    threads.type: int
    threads.type.error: the number of threads must be a positive integer

=item -o[ut] <outfile> | --outfile <outfile>

Filename for the final gff3 file

=for Euclid:
    outfile.default: 'mannotatored.gff3'
    outfile.type: writable
    outfile.type.error: You do not have permission to write to <outfile>

=item -k[eep] | --keep-tmp

Keep all tmp files and directories created

=item -x | --keep-blast

Keep only the blast results and delete all other tmp files

=item -s[ims] | --blast-sims

Use a precomputed blast output file

=item -n[ew_blast] | --blast+

Use the blast+ toolkit, default is to use blastall

=item -one | --one

Skip step one of the mannotator

=item -two | --two

Skip step two of the mannotator

=item -three | --three

skip step three of the mannotator

=item -four | --four

Skip step four of the mannotator

=item -five | --five

Skip step five of the mannotator

=back

=cut

