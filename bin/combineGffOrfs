#! /usr/bin/env perl

###############################################################################
#
#    combineGffOrfs.pl
#
#    parse a list of gff3 files in order, 
#
#    Copyright (C) 2011 2012 Michael Imelfort Florent Angly Connor Skennerton
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
###############################################################################
BEGIN {
    select(STDERR);
    $| = 1;
    select(STDOUT);
    $| = 1;
}
#pragmas
use strict;
use warnings;

#Perl modules
use Getopt::Long;
use Mannotator;



# get input params and print copyright
printAtStart();
my $options = checkParams();

######################################################################
# CODE HERE
######################################################################

# globals
my %global_gff_used_list = ();
my $global_any_inserted = 0;

# turn debugging on (1) or off (0)
my $debug = 0;

# reject all orfs which overlap with already accepted orfs by 
# at least this much
my $global_shared_olap_cutoff = 0.1;

# reject all orfs less than this amount!
my $default_min_orf_cutoff = 100;
if(exists $options->{'min_len'}) { $default_min_orf_cutoff = $options->{'min_len'}; }

# output gff3 file
my $default_feat_file = 'parsed.gff3';
if(exists $options->{'out'}) { $default_feat_file = $options->{'out'}; }
open my $feat_fh, ">", $default_feat_file or die "Error: Could not write file $default_feat_file\n$!\n";

# output todo annotation file
my $default_seq_file = 'todo.fa';
if(exists $options->{'ann'}) { $default_seq_file = $options->{'ann'}; }
open my $seq_fh, ">", $default_seq_file or die "Error: Could not write file $default_seq_file\n$!\n";

# first parse the fasta file of contigs to get headers and sequence lengths...
# really there should only be one guy here...
my $seqio_object = Bio::SeqIO->new(-file => $options->{'contigs'}, -format => 'fasta');
my $global_seq = $seqio_object->next_seq;
my $global_seq_length = $global_seq->length;
$seqio_object->close;

# initialise the linked list
my $global_gff_list = GffObject->new();
$global_gff_list->GO_prevGO_ref(\$global_gff_list);
$global_gff_list->GO_nextGO_ref(\$global_gff_list);
$global_gff_list->GO_next_start($global_seq_length);
$global_gff_list->GO_start($global_seq_length);
$global_gff_list->GO_end(0);

#nd value used so we don't loop the loop!
my $global_end_ref = \$global_gff_list;

# get all the gff file names!
my @gff_fns = split /,/, $options->{'gffs'};
foreach my $gff3 (@gff_fns)
{
    if (not -e $gff3) {
        die "Error: Could not read GFF file $gff3\n$!\n";
    }

    # specify input via -fh or -file
    my $gffio = Bio::Tools::GFF->new(-file => $gff3, -gff_version => 3);
    my $features_used = 0;

    my $ins_ref = \$global_gff_list;
    # loop over the input stream
    while(my $feat = $gffio->next_feature()) {

        # filter out orf if it is too short
        if ($feat->length < $default_min_orf_cutoff) {
            debugFeature('Not keeping feature '.feat2str($feat), "less than $default_min_orf_cutoff bp") if ($debug);
            next;
        }

        # then insert
        $ins_ref = insertFeature($ins_ref, \$feat, \$global_gff_list, $debug, $global_shared_olap_cutoff, $global_end_ref);
    }

    # clean up
    $gffio->close();

    # record keeping
    $global_gff_used_list{$gff3} = $features_used;
}



# print to the output file
print $feat_fh "##gff-version 3\n";
my $gffio = Bio::Tools::GFF->new(-gff_version => 3);
my $list_handle_ref = \$global_gff_list;
while(nextInList(\$list_handle_ref, $global_end_ref) == 1)
{
    my $current_node = ${$list_handle_ref};
    my $current_feat_ref = $current_node->GO_gffRef;
    my $current_feature = ${$current_feat_ref};
    my $gff_string = $current_feature->gff_string($gffio);
    my @gff_bits = split /\t/, $gff_string;

    # Write sequence except if it is a RAST annotated gene
    unless( ($gff_bits[1] eq 'FIG') && ($gff_bits[8] !~ /hypothetical/) ) {
        my $seq_entry = '>'.$gff_bits[0].'_'.$current_node->GO_start.'_'.$current_node->GO_end."\n".
                        $global_seq->subseq($current_node->GO_start, $current_node->GO_end)."\n";
        print $seq_fh $seq_entry;
    }

    # check to see if we'll need to do some annotation afterwards...
    print $feat_fh "$gff_string\n";
}

######################################################################
# TEMPLATE SUBS
######################################################################
sub checkParams {
    my @standard_options = ( "help|h+", "gffs|g:s", "contigs|c:s", "out|o:s", "ann|a:s", "min_len|m:s");
    my %options;

    # Add any other command line options, and the code to handle them
    # 
    GetOptions( \%options, @standard_options );

    # if no arguments supplied print the usage and exit
    #
    exec("pod2usage $0") if (0 == (keys (%options) ));

    # If the -help option is set, print the usage and exit
    #
    exec("pod2usage $0") if $options{'help'};

    # check that the user gave us some GFF3 files to parse
    if(!exists($options{'gffs'}))
    {
        print "ERROR: You need to supply at least one gff file to continue!";
        exec("pod2usage $0");
    }

    # check that the user gave us a contig file
    if(!exists($options{'contigs'}))
    {
        print "ERROR: You need to supply the contigs file!";
        exec("pod2usage $0");
    }

    return \%options;
}

sub printAtStart {
print<<"EOF";
---------------------------------------------------------------- 
 $0
 Copyright (C) 2011 Michael Imelfort
    
 This program comes with ABSOLUTELY NO WARRANTY;
 This is free software, and you are welcome to redistribute it
 under certain conditions: See the source for more details.
---------------------------------------------------------------- 
EOF
}

__DATA__

=head1 NAME

    combineGffOrfs.pl

=head1 COPYRIGHT

   copyright (C) 2011 2012 Michael Imelfort Florent Angly Connor Skennerton

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.

=head1 DESCRIPTION

   Insert detailed description here

=head1 SYNOPSIS

    combineGffOrfs.pl -gffs|g gff_file1[,gff_file2[, ... ]] -contigs|c contigs_file

     -gffs    -g FILE      Gff3 files to parse (comma separated list, in order of "trust"
     -contigs -c FILE      Contigs which were annotated to produce the gff3 files. (Headers must match!)
    [-out     -o FILE   ]  Output file to write to [default: parsed.gff3]
    [-ann     -a FILE   ]  File to place fasta type sequences for further annotation [default: todo.fa]
    [-min_len -m INTEGER]  Minimum ORF length (in bp). ORFs smaller than this are discarded [default: 100]
    [-help    -h        ]  Displays basic usage information

=cut

